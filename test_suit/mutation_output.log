[*] Start mutation process:
   - targets: isTriangle
   - tests: test_mutationAdequate
[*] 1 tests passed:
   - test_mutationAdequate [0.00009 s]
[*] Start mutants generation and execution:
   - [#   1] AOR isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if (a - b <= c or a + c <= b or b + c <= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.09622 s] survived
   - [#   2] AOR isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if (a + b <= c or a - c <= b or b + c <= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.09642 s] survived
   - [#   3] AOR isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if (a + b <= c or a + c <= b or b - c <= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.10012 s] survived
   - [#   4] AOR isTriangle: 
--------------------------------------------------------------------------------
  38:         
  39:         if trian > 3:
  40:             return Triangle.Type.EQUILATERAL
  41:         
- 42:         if (trian == 1 and a + b > c):
+ 42:         if (trian == 1 and a - b > c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
--------------------------------------------------------------------------------
[0.09890 s] survived
   - [#   5] AOR isTriangle: 
--------------------------------------------------------------------------------
  40:             return Triangle.Type.EQUILATERAL
  41:         
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
- 44:         elif (trian == 2 and a + c > b):
+ 44:         elif (trian == 2 and a - c > b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
  47:             return Triangle.Type.ISOSCELES
  48:         
--------------------------------------------------------------------------------
[0.09922 s] survived
   - [#   6] AOR isTriangle: 
--------------------------------------------------------------------------------
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
- 46:         elif (trian == 3 and b + c > a):
+ 46:         elif (trian == 3 and b - c > a):
  47:             return Triangle.Type.ISOSCELES
  48:         
  49:         return Triangle.Type.INVALID
--------------------------------------------------------------------------------
[0.10038 s] survived
   - [#   7] ASR isTriangle: 
--------------------------------------------------------------------------------
  23:         
  24:         trian = 0
  25:         
  26:         if a == b:
- 27:             trian += 1
+ 27:             trian -= 1
  28:         if a == c:
  29:             trian += 2
  30:         if b == c:
  31:             trian += 3
--------------------------------------------------------------------------------
[0.09722 s] survived
   - [#   8] ASR isTriangle: 
--------------------------------------------------------------------------------
  25:         
  26:         if a == b:
  27:             trian += 1
  28:         if a == c:
- 29:             trian += 2
+ 29:             trian -= 2
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
--------------------------------------------------------------------------------
[0.09702 s] survived
   - [#   9] ASR isTriangle: 
--------------------------------------------------------------------------------
  27:             trian += 1
  28:         if a == c:
  29:             trian += 2
  30:         if b == c:
- 31:             trian += 3
+ 31:             trian -= 3
  32:         
  33:         if trian == 0:
  34:             if (a + b <= c or a + c <= b or b + c <= a):
  35:                 return Triangle.Type.INVALID
--------------------------------------------------------------------------------
[0.09661 s] survived
   - [#  10] COI isTriangle: 
--------------------------------------------------------------------------------
  17:     def classify(a, b, c):'''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
- 21:         if (a <= 0 or b <= 0 or c <= 0):
+ 21:         if not ((a <= 0 or b <= 0 or c <= 0)):
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
--------------------------------------------------------------------------------
[0.09550 s] survived
   - [#  11] COI isTriangle: 
--------------------------------------------------------------------------------
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
- 26:         if a == b:
+ 26:         if not (a == b):
  27:             trian += 1
  28:         if a == c:
  29:             trian += 2
  30:         if b == c:
--------------------------------------------------------------------------------
[0.09685 s] survived
   - [#  12] COI isTriangle: 
--------------------------------------------------------------------------------
  24:         trian = 0
  25:         
  26:         if a == b:
  27:             trian += 1
- 28:         if a == c:
+ 28:         if not (a == c):
  29:             trian += 2
  30:         if b == c:
  31:             trian += 3
  32:         
--------------------------------------------------------------------------------
[0.09791 s] survived
   - [#  13] COI isTriangle: 
--------------------------------------------------------------------------------
  26:         if a == b:
  27:             trian += 1
  28:         if a == c:
  29:             trian += 2
- 30:         if b == c:
+ 30:         if not (b == c):
  31:             trian += 3
  32:         
  33:         if trian == 0:
  34:             if (a + b <= c or a + c <= b or b + c <= a):
--------------------------------------------------------------------------------
[0.09724 s] survived
   - [#  14] COI isTriangle: 
--------------------------------------------------------------------------------
  29:             trian += 2
  30:         if b == c:
  31:             trian += 3
  32:         
- 33:         if trian == 0:
+ 33:         if not (trian == 0):
  34:             if (a + b <= c or a + c <= b or b + c <= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
--------------------------------------------------------------------------------
[0.09808 s] survived
   - [#  15] COI isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if not ((a + b <= c or a + c <= b or b + c <= a)):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.09923 s] survived
   - [#  16] COI isTriangle: 
--------------------------------------------------------------------------------
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
- 39:         if trian > 3:
+ 39:         if not (trian > 3):
  40:             return Triangle.Type.EQUILATERAL
  41:         
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
--------------------------------------------------------------------------------
[0.09633 s] survived
   - [#  17] COI isTriangle: 
--------------------------------------------------------------------------------
  38:         
  39:         if trian > 3:
  40:             return Triangle.Type.EQUILATERAL
  41:         
- 42:         if (trian == 1 and a + b > c):
+ 42:         if not ((trian == 1 and a + b > c)):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
--------------------------------------------------------------------------------
[0.09708 s] survived
   - [#  18] COI isTriangle: 
--------------------------------------------------------------------------------
  40:             return Triangle.Type.EQUILATERAL
  41:         
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
- 44:         elif (trian == 2 and a + c > b):
+ 44:         elif not ((trian == 2 and a + c > b)):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
  47:             return Triangle.Type.ISOSCELES
  48:         
--------------------------------------------------------------------------------
[0.09761 s] survived
   - [#  19] COI isTriangle: 
--------------------------------------------------------------------------------
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
- 46:         elif (trian == 3 and b + c > a):
+ 46:         elif not ((trian == 3 and b + c > a)):
  47:             return Triangle.Type.ISOSCELES
  48:         
  49:         return Triangle.Type.INVALID
--------------------------------------------------------------------------------
[0.09747 s] survived
   - [#  20] DDL isTriangle: 
--------------------------------------------------------------------------------
  12:         EQUILATERAL = 2
  13:         ISOSCELES = 3
  14:     
  15:     
- 16:     @staticmethod
- 17:     def classify(a, b, c):'''
+ 16:     def classify(a, b, c):
+ 17:         '''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
  21:         if (a <= 0 or b <= 0 or c <= 0):
--------------------------------------------------------------------------------
[0.09654 s] survived
   - [#  21] LCR isTriangle: 
--------------------------------------------------------------------------------
  17:     def classify(a, b, c):'''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
- 21:         if (a <= 0 or b <= 0 or c <= 0):
+ 21:         if (a <= 0 and b <= 0 and c <= 0):
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
--------------------------------------------------------------------------------
[0.09947 s] survived
   - [#  22] LCR isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if (a + b <= c and a + c <= b and b + c <= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.09947 s] survived
   - [#  23] LCR isTriangle: 
--------------------------------------------------------------------------------
  38:         
  39:         if trian > 3:
  40:             return Triangle.Type.EQUILATERAL
  41:         
- 42:         if (trian == 1 and a + b > c):
+ 42:         if (trian == 1 or a + b > c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
--------------------------------------------------------------------------------
[0.09795 s] survived
   - [#  24] LCR isTriangle: 
--------------------------------------------------------------------------------
  40:             return Triangle.Type.EQUILATERAL
  41:         
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
- 44:         elif (trian == 2 and a + c > b):
+ 44:         elif (trian == 2 or a + c > b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
  47:             return Triangle.Type.ISOSCELES
  48:         
--------------------------------------------------------------------------------
[0.09949 s] survived
   - [#  25] LCR isTriangle: 
--------------------------------------------------------------------------------
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
- 46:         elif (trian == 3 and b + c > a):
+ 46:         elif (trian == 3 or b + c > a):
  47:             return Triangle.Type.ISOSCELES
  48:         
  49:         return Triangle.Type.INVALID
--------------------------------------------------------------------------------
[0.09737 s] survived
   - [#  26] ROR isTriangle: 
--------------------------------------------------------------------------------
  17:     def classify(a, b, c):'''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
- 21:         if (a <= 0 or b <= 0 or c <= 0):
+ 21:         if (a >= 0 or b <= 0 or c <= 0):
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
--------------------------------------------------------------------------------
[0.09803 s] survived
   - [#  27] ROR isTriangle: 
--------------------------------------------------------------------------------
  17:     def classify(a, b, c):'''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
- 21:         if (a <= 0 or b <= 0 or c <= 0):
+ 21:         if (a < 0 or b <= 0 or c <= 0):
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
--------------------------------------------------------------------------------
[0.09854 s] survived
   - [#  28] ROR isTriangle: 
--------------------------------------------------------------------------------
  17:     def classify(a, b, c):'''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
- 21:         if (a <= 0 or b <= 0 or c <= 0):
+ 21:         if (a <= 0 or b >= 0 or c <= 0):
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
--------------------------------------------------------------------------------
[0.09693 s] survived
   - [#  29] ROR isTriangle: 
--------------------------------------------------------------------------------
  17:     def classify(a, b, c):'''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
- 21:         if (a <= 0 or b <= 0 or c <= 0):
+ 21:         if (a <= 0 or b < 0 or c <= 0):
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
--------------------------------------------------------------------------------
[0.09637 s] survived
   - [#  30] ROR isTriangle: 
--------------------------------------------------------------------------------
  17:     def classify(a, b, c):'''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
- 21:         if (a <= 0 or b <= 0 or c <= 0):
+ 21:         if (a <= 0 or b <= 0 or c >= 0):
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
--------------------------------------------------------------------------------
[0.09675 s] survived
   - [#  31] ROR isTriangle: 
--------------------------------------------------------------------------------
  17:     def classify(a, b, c):'''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
- 21:         if (a <= 0 or b <= 0 or c <= 0):
+ 21:         if (a <= 0 or b <= 0 or c < 0):
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
--------------------------------------------------------------------------------
[0.09811 s] survived
   - [#  32] ROR isTriangle: 
--------------------------------------------------------------------------------
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
- 26:         if a == b:
+ 26:         if a != b:
  27:             trian += 1
  28:         if a == c:
  29:             trian += 2
  30:         if b == c:
--------------------------------------------------------------------------------
[0.09855 s] survived
   - [#  33] ROR isTriangle: 
--------------------------------------------------------------------------------
  24:         trian = 0
  25:         
  26:         if a == b:
  27:             trian += 1
- 28:         if a == c:
+ 28:         if a != c:
  29:             trian += 2
  30:         if b == c:
  31:             trian += 3
  32:         
--------------------------------------------------------------------------------
[0.09662 s] survived
   - [#  34] ROR isTriangle: 
--------------------------------------------------------------------------------
  26:         if a == b:
  27:             trian += 1
  28:         if a == c:
  29:             trian += 2
- 30:         if b == c:
+ 30:         if b != c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
  34:             if (a + b <= c or a + c <= b or b + c <= a):
--------------------------------------------------------------------------------
[0.09856 s] survived
   - [#  35] ROR isTriangle: 
--------------------------------------------------------------------------------
  29:             trian += 2
  30:         if b == c:
  31:             trian += 3
  32:         
- 33:         if trian == 0:
+ 33:         if trian != 0:
  34:             if (a + b <= c or a + c <= b or b + c <= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
--------------------------------------------------------------------------------
[0.09690 s] survived
   - [#  36] ROR isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if (a + b >= c or a + c <= b or b + c <= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.09729 s] survived
   - [#  37] ROR isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if (a + b < c or a + c <= b or b + c <= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.09843 s] survived
   - [#  38] ROR isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if (a + b <= c or a + c >= b or b + c <= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.09748 s] survived
   - [#  39] ROR isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if (a + b <= c or a + c < b or b + c <= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.09919 s] survived
   - [#  40] ROR isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if (a + b <= c or a + c <= b or b + c >= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.09858 s] survived
   - [#  41] ROR isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if (a + b <= c or a + c <= b or b + c < a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.09885 s] survived
   - [#  42] ROR isTriangle: 
--------------------------------------------------------------------------------
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
- 39:         if trian > 3:
+ 39:         if trian < 3:
  40:             return Triangle.Type.EQUILATERAL
  41:         
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
--------------------------------------------------------------------------------
[0.09629 s] survived
   - [#  43] ROR isTriangle: 
--------------------------------------------------------------------------------
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
- 39:         if trian > 3:
+ 39:         if trian >= 3:
  40:             return Triangle.Type.EQUILATERAL
  41:         
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
--------------------------------------------------------------------------------
[0.09663 s] survived
   - [#  44] ROR isTriangle: 
--------------------------------------------------------------------------------
  38:         
  39:         if trian > 3:
  40:             return Triangle.Type.EQUILATERAL
  41:         
- 42:         if (trian == 1 and a + b > c):
+ 42:         if (trian != 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
--------------------------------------------------------------------------------
[0.09628 s] survived
   - [#  45] ROR isTriangle: 
--------------------------------------------------------------------------------
  38:         
  39:         if trian > 3:
  40:             return Triangle.Type.EQUILATERAL
  41:         
- 42:         if (trian == 1 and a + b > c):
+ 42:         if (trian == 1 and a + b < c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
--------------------------------------------------------------------------------
[0.09564 s] survived
   - [#  46] ROR isTriangle: 
--------------------------------------------------------------------------------
  38:         
  39:         if trian > 3:
  40:             return Triangle.Type.EQUILATERAL
  41:         
- 42:         if (trian == 1 and a + b > c):
+ 42:         if (trian == 1 and a + b >= c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
--------------------------------------------------------------------------------
[0.09665 s] survived
   - [#  47] ROR isTriangle: 
--------------------------------------------------------------------------------
  40:             return Triangle.Type.EQUILATERAL
  41:         
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
- 44:         elif (trian == 2 and a + c > b):
+ 44:         elif (trian != 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
  47:             return Triangle.Type.ISOSCELES
  48:         
--------------------------------------------------------------------------------
[0.09542 s] survived
   - [#  48] ROR isTriangle: 
--------------------------------------------------------------------------------
  40:             return Triangle.Type.EQUILATERAL
  41:         
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
- 44:         elif (trian == 2 and a + c > b):
+ 44:         elif (trian == 2 and a + c < b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
  47:             return Triangle.Type.ISOSCELES
  48:         
--------------------------------------------------------------------------------
[0.09681 s] survived
   - [#  49] ROR isTriangle: 
--------------------------------------------------------------------------------
  40:             return Triangle.Type.EQUILATERAL
  41:         
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
- 44:         elif (trian == 2 and a + c > b):
+ 44:         elif (trian == 2 and a + c >= b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
  47:             return Triangle.Type.ISOSCELES
  48:         
--------------------------------------------------------------------------------
[0.09476 s] survived
   - [#  50] ROR isTriangle: 
--------------------------------------------------------------------------------
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
- 46:         elif (trian == 3 and b + c > a):
+ 46:         elif (trian != 3 and b + c > a):
  47:             return Triangle.Type.ISOSCELES
  48:         
  49:         return Triangle.Type.INVALID
--------------------------------------------------------------------------------
[0.09662 s] survived
   - [#  51] ROR isTriangle: 
--------------------------------------------------------------------------------
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
- 46:         elif (trian == 3 and b + c > a):
+ 46:         elif (trian == 3 and b + c < a):
  47:             return Triangle.Type.ISOSCELES
  48:         
  49:         return Triangle.Type.INVALID
--------------------------------------------------------------------------------
[0.09664 s] survived
   - [#  52] ROR isTriangle: 
--------------------------------------------------------------------------------
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
- 46:         elif (trian == 3 and b + c > a):
+ 46:         elif (trian == 3 and b + c >= a):
  47:             return Triangle.Type.ISOSCELES
  48:         
  49:         return Triangle.Type.INVALID
--------------------------------------------------------------------------------
[0.09523 s] survived
[*] Mutation score [5.46640 s]: 0.0%
   - all: 52
   - killed: 0 (0.0%)
   - survived: 52 (100.0%)
   - incompetent: 0 (0.0%)
   - timeout: 0 (0.0%)
[*] Start mutation process:
   - targets: isTriangle
   - tests: test_mutationAdequate
[*] 1 tests passed:
   - test_mutationAdequate [0.00011 s]
[*] Start mutants generation and execution:
   - [#   1] AOR isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if (a - b <= c or a + c <= b or b + c <= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.09629 s] survived
   - [#   2] AOR isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if (a + b <= c or a - c <= b or b + c <= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.09948 s] survived
   - [#   3] AOR isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if (a + b <= c or a + c <= b or b - c <= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.09726 s] survived
   - [#   4] AOR isTriangle: 
--------------------------------------------------------------------------------
  38:         
  39:         if trian > 3:
  40:             return Triangle.Type.EQUILATERAL
  41:         
- 42:         if (trian == 1 and a + b > c):
+ 42:         if (trian == 1 and a - b > c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
--------------------------------------------------------------------------------
[0.09858 s] survived
   - [#   5] AOR isTriangle: 
--------------------------------------------------------------------------------
  40:             return Triangle.Type.EQUILATERAL
  41:         
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
- 44:         elif (trian == 2 and a + c > b):
+ 44:         elif (trian == 2 and a - c > b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
  47:             return Triangle.Type.ISOSCELES
  48:         
--------------------------------------------------------------------------------
[0.09752 s] survived
   - [#   6] AOR isTriangle: 
--------------------------------------------------------------------------------
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
- 46:         elif (trian == 3 and b + c > a):
+ 46:         elif (trian == 3 and b - c > a):
  47:             return Triangle.Type.ISOSCELES
  48:         
  49:         return Triangle.Type.INVALID
--------------------------------------------------------------------------------
[0.10249 s] survived
   - [#   7] ASR isTriangle: 
--------------------------------------------------------------------------------
  23:         
  24:         trian = 0
  25:         
  26:         if a == b:
- 27:             trian += 1
+ 27:             trian -= 1
  28:         if a == c:
  29:             trian += 2
  30:         if b == c:
  31:             trian += 3
--------------------------------------------------------------------------------
[0.09764 s] survived
   - [#   8] ASR isTriangle: 
--------------------------------------------------------------------------------
  25:         
  26:         if a == b:
  27:             trian += 1
  28:         if a == c:
- 29:             trian += 2
+ 29:             trian -= 2
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
--------------------------------------------------------------------------------
[0.09584 s] survived
   - [#   9] ASR isTriangle: 
--------------------------------------------------------------------------------
  27:             trian += 1
  28:         if a == c:
  29:             trian += 2
  30:         if b == c:
- 31:             trian += 3
+ 31:             trian -= 3
  32:         
  33:         if trian == 0:
  34:             if (a + b <= c or a + c <= b or b + c <= a):
  35:                 return Triangle.Type.INVALID
--------------------------------------------------------------------------------
[0.09800 s] survived
   - [#  10] COI isTriangle: 
--------------------------------------------------------------------------------
  17:     def classify(a, b, c):'''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
- 21:         if (a <= 0 or b <= 0 or c <= 0):
+ 21:         if not ((a <= 0 or b <= 0 or c <= 0)):
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
--------------------------------------------------------------------------------
[0.10221 s] survived
   - [#  11] COI isTriangle: 
--------------------------------------------------------------------------------
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
- 26:         if a == b:
+ 26:         if not (a == b):
  27:             trian += 1
  28:         if a == c:
  29:             trian += 2
  30:         if b == c:
--------------------------------------------------------------------------------
[0.10172 s] survived
   - [#  12] COI isTriangle: 
--------------------------------------------------------------------------------
  24:         trian = 0
  25:         
  26:         if a == b:
  27:             trian += 1
- 28:         if a == c:
+ 28:         if not (a == c):
  29:             trian += 2
  30:         if b == c:
  31:             trian += 3
  32:         
--------------------------------------------------------------------------------
[0.10944 s] survived
   - [#  13] COI isTriangle: 
--------------------------------------------------------------------------------
  26:         if a == b:
  27:             trian += 1
  28:         if a == c:
  29:             trian += 2
- 30:         if b == c:
+ 30:         if not (b == c):
  31:             trian += 3
  32:         
  33:         if trian == 0:
  34:             if (a + b <= c or a + c <= b or b + c <= a):
--------------------------------------------------------------------------------
[0.10016 s] survived
   - [#  14] COI isTriangle: 
--------------------------------------------------------------------------------
  29:             trian += 2
  30:         if b == c:
  31:             trian += 3
  32:         
- 33:         if trian == 0:
+ 33:         if not (trian == 0):
  34:             if (a + b <= c or a + c <= b or b + c <= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
--------------------------------------------------------------------------------
[0.09783 s] survived
   - [#  15] COI isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if not ((a + b <= c or a + c <= b or b + c <= a)):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.09926 s] survived
   - [#  16] COI isTriangle: 
--------------------------------------------------------------------------------
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
- 39:         if trian > 3:
+ 39:         if not (trian > 3):
  40:             return Triangle.Type.EQUILATERAL
  41:         
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
--------------------------------------------------------------------------------
[0.09808 s] survived
   - [#  17] COI isTriangle: 
--------------------------------------------------------------------------------
  38:         
  39:         if trian > 3:
  40:             return Triangle.Type.EQUILATERAL
  41:         
- 42:         if (trian == 1 and a + b > c):
+ 42:         if not ((trian == 1 and a + b > c)):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
--------------------------------------------------------------------------------
[0.09710 s] survived
   - [#  18] COI isTriangle: 
--------------------------------------------------------------------------------
  40:             return Triangle.Type.EQUILATERAL
  41:         
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
- 44:         elif (trian == 2 and a + c > b):
+ 44:         elif not ((trian == 2 and a + c > b)):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
  47:             return Triangle.Type.ISOSCELES
  48:         
--------------------------------------------------------------------------------
[0.09788 s] survived
   - [#  19] COI isTriangle: 
--------------------------------------------------------------------------------
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
- 46:         elif (trian == 3 and b + c > a):
+ 46:         elif not ((trian == 3 and b + c > a)):
  47:             return Triangle.Type.ISOSCELES
  48:         
  49:         return Triangle.Type.INVALID
--------------------------------------------------------------------------------
[0.09805 s] survived
   - [#  20] DDL isTriangle: 
--------------------------------------------------------------------------------
  12:         EQUILATERAL = 2
  13:         ISOSCELES = 3
  14:     
  15:     
- 16:     @staticmethod
- 17:     def classify(a, b, c):'''
+ 16:     def classify(a, b, c):
+ 17:         '''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
  21:         if (a <= 0 or b <= 0 or c <= 0):
--------------------------------------------------------------------------------
[0.09506 s] survived
   - [#  21] LCR isTriangle: 
--------------------------------------------------------------------------------
  17:     def classify(a, b, c):'''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
- 21:         if (a <= 0 or b <= 0 or c <= 0):
+ 21:         if (a <= 0 and b <= 0 and c <= 0):
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
--------------------------------------------------------------------------------
[0.09685 s] survived
   - [#  22] LCR isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if (a + b <= c and a + c <= b and b + c <= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.09462 s] survived
   - [#  23] LCR isTriangle: 
--------------------------------------------------------------------------------
  38:         
  39:         if trian > 3:
  40:             return Triangle.Type.EQUILATERAL
  41:         
- 42:         if (trian == 1 and a + b > c):
+ 42:         if (trian == 1 or a + b > c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
--------------------------------------------------------------------------------
[0.09583 s] survived
   - [#  24] LCR isTriangle: 
--------------------------------------------------------------------------------
  40:             return Triangle.Type.EQUILATERAL
  41:         
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
- 44:         elif (trian == 2 and a + c > b):
+ 44:         elif (trian == 2 or a + c > b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
  47:             return Triangle.Type.ISOSCELES
  48:         
--------------------------------------------------------------------------------
[0.09570 s] survived
   - [#  25] LCR isTriangle: 
--------------------------------------------------------------------------------
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
- 46:         elif (trian == 3 and b + c > a):
+ 46:         elif (trian == 3 or b + c > a):
  47:             return Triangle.Type.ISOSCELES
  48:         
  49:         return Triangle.Type.INVALID
--------------------------------------------------------------------------------
[0.09659 s] survived
   - [#  26] ROR isTriangle: 
--------------------------------------------------------------------------------
  17:     def classify(a, b, c):'''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
- 21:         if (a <= 0 or b <= 0 or c <= 0):
+ 21:         if (a >= 0 or b <= 0 or c <= 0):
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
--------------------------------------------------------------------------------
[0.09547 s] survived
   - [#  27] ROR isTriangle: 
--------------------------------------------------------------------------------
  17:     def classify(a, b, c):'''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
- 21:         if (a <= 0 or b <= 0 or c <= 0):
+ 21:         if (a < 0 or b <= 0 or c <= 0):
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
--------------------------------------------------------------------------------
[0.09486 s] survived
   - [#  28] ROR isTriangle: 
--------------------------------------------------------------------------------
  17:     def classify(a, b, c):'''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
- 21:         if (a <= 0 or b <= 0 or c <= 0):
+ 21:         if (a <= 0 or b >= 0 or c <= 0):
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
--------------------------------------------------------------------------------
[0.09523 s] survived
   - [#  29] ROR isTriangle: 
--------------------------------------------------------------------------------
  17:     def classify(a, b, c):'''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
- 21:         if (a <= 0 or b <= 0 or c <= 0):
+ 21:         if (a <= 0 or b < 0 or c <= 0):
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
--------------------------------------------------------------------------------
[0.09543 s] survived
   - [#  30] ROR isTriangle: 
--------------------------------------------------------------------------------
  17:     def classify(a, b, c):'''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
- 21:         if (a <= 0 or b <= 0 or c <= 0):
+ 21:         if (a <= 0 or b <= 0 or c >= 0):
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
--------------------------------------------------------------------------------
[0.09559 s] survived
   - [#  31] ROR isTriangle: 
--------------------------------------------------------------------------------
  17:     def classify(a, b, c):'''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
- 21:         if (a <= 0 or b <= 0 or c <= 0):
+ 21:         if (a <= 0 or b <= 0 or c < 0):
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
--------------------------------------------------------------------------------
[0.09587 s] survived
   - [#  32] ROR isTriangle: 
--------------------------------------------------------------------------------
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
- 26:         if a == b:
+ 26:         if a != b:
  27:             trian += 1
  28:         if a == c:
  29:             trian += 2
  30:         if b == c:
--------------------------------------------------------------------------------
[0.09647 s] survived
   - [#  33] ROR isTriangle: 
--------------------------------------------------------------------------------
  24:         trian = 0
  25:         
  26:         if a == b:
  27:             trian += 1
- 28:         if a == c:
+ 28:         if a != c:
  29:             trian += 2
  30:         if b == c:
  31:             trian += 3
  32:         
--------------------------------------------------------------------------------
[0.09682 s] survived
   - [#  34] ROR isTriangle: 
--------------------------------------------------------------------------------
  26:         if a == b:
  27:             trian += 1
  28:         if a == c:
  29:             trian += 2
- 30:         if b == c:
+ 30:         if b != c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
  34:             if (a + b <= c or a + c <= b or b + c <= a):
--------------------------------------------------------------------------------
[0.09544 s] survived
   - [#  35] ROR isTriangle: 
--------------------------------------------------------------------------------
  29:             trian += 2
  30:         if b == c:
  31:             trian += 3
  32:         
- 33:         if trian == 0:
+ 33:         if trian != 0:
  34:             if (a + b <= c or a + c <= b or b + c <= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
--------------------------------------------------------------------------------
[0.09640 s] survived
   - [#  36] ROR isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if (a + b >= c or a + c <= b or b + c <= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.09570 s] survived
   - [#  37] ROR isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if (a + b < c or a + c <= b or b + c <= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.09616 s] survived
   - [#  38] ROR isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if (a + b <= c or a + c >= b or b + c <= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.09578 s] survived
   - [#  39] ROR isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if (a + b <= c or a + c < b or b + c <= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.09640 s] survived
   - [#  40] ROR isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if (a + b <= c or a + c <= b or b + c >= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.09860 s] survived
   - [#  41] ROR isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if (a + b <= c or a + c <= b or b + c < a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.09686 s] survived
   - [#  42] ROR isTriangle: 
--------------------------------------------------------------------------------
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
- 39:         if trian > 3:
+ 39:         if trian < 3:
  40:             return Triangle.Type.EQUILATERAL
  41:         
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
--------------------------------------------------------------------------------
[0.09664 s] survived
   - [#  43] ROR isTriangle: 
--------------------------------------------------------------------------------
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
- 39:         if trian > 3:
+ 39:         if trian >= 3:
  40:             return Triangle.Type.EQUILATERAL
  41:         
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
--------------------------------------------------------------------------------
[0.09643 s] survived
   - [#  44] ROR isTriangle: 
--------------------------------------------------------------------------------
  38:         
  39:         if trian > 3:
  40:             return Triangle.Type.EQUILATERAL
  41:         
- 42:         if (trian == 1 and a + b > c):
+ 42:         if (trian != 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
--------------------------------------------------------------------------------
[0.09974 s] survived
   - [#  45] ROR isTriangle: 
--------------------------------------------------------------------------------
  38:         
  39:         if trian > 3:
  40:             return Triangle.Type.EQUILATERAL
  41:         
- 42:         if (trian == 1 and a + b > c):
+ 42:         if (trian == 1 and a + b < c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
--------------------------------------------------------------------------------
[0.09851 s] survived
   - [#  46] ROR isTriangle: 
--------------------------------------------------------------------------------
  38:         
  39:         if trian > 3:
  40:             return Triangle.Type.EQUILATERAL
  41:         
- 42:         if (trian == 1 and a + b > c):
+ 42:         if (trian == 1 and a + b >= c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
--------------------------------------------------------------------------------
[0.09571 s] survived
   - [#  47] ROR isTriangle: 
--------------------------------------------------------------------------------
  40:             return Triangle.Type.EQUILATERAL
  41:         
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
- 44:         elif (trian == 2 and a + c > b):
+ 44:         elif (trian != 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
  47:             return Triangle.Type.ISOSCELES
  48:         
--------------------------------------------------------------------------------
[0.09701 s] survived
   - [#  48] ROR isTriangle: 
--------------------------------------------------------------------------------
  40:             return Triangle.Type.EQUILATERAL
  41:         
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
- 44:         elif (trian == 2 and a + c > b):
+ 44:         elif (trian == 2 and a + c < b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
  47:             return Triangle.Type.ISOSCELES
  48:         
--------------------------------------------------------------------------------
[0.09536 s] survived
   - [#  49] ROR isTriangle: 
--------------------------------------------------------------------------------
  40:             return Triangle.Type.EQUILATERAL
  41:         
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
- 44:         elif (trian == 2 and a + c > b):
+ 44:         elif (trian == 2 and a + c >= b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
  47:             return Triangle.Type.ISOSCELES
  48:         
--------------------------------------------------------------------------------
[0.09694 s] survived
   - [#  50] ROR isTriangle: 
--------------------------------------------------------------------------------
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
- 46:         elif (trian == 3 and b + c > a):
+ 46:         elif (trian != 3 and b + c > a):
  47:             return Triangle.Type.ISOSCELES
  48:         
  49:         return Triangle.Type.INVALID
--------------------------------------------------------------------------------
[0.09770 s] survived
   - [#  51] ROR isTriangle: 
--------------------------------------------------------------------------------
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
- 46:         elif (trian == 3 and b + c > a):
+ 46:         elif (trian == 3 and b + c < a):
  47:             return Triangle.Type.ISOSCELES
  48:         
  49:         return Triangle.Type.INVALID
--------------------------------------------------------------------------------
[0.09776 s] survived
   - [#  52] ROR isTriangle: 
--------------------------------------------------------------------------------
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
- 46:         elif (trian == 3 and b + c > a):
+ 46:         elif (trian == 3 and b + c >= a):
  47:             return Triangle.Type.ISOSCELES
  48:         
  49:         return Triangle.Type.INVALID
--------------------------------------------------------------------------------
[0.09753 s] survived
[*] Mutation score [5.60752 s]: 0.0%
   - all: 52
   - killed: 0 (0.0%)
   - survived: 52 (100.0%)
   - incompetent: 0 (0.0%)
   - timeout: 0 (0.0%)
